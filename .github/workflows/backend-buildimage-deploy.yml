name: Backend Build and Push Docker Image To AWS ECR Repo

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-and-push:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4.2.2

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3.7.1

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4.0.2

      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    - name: Build and push Docker images
      uses: docker/build-push-action@v6.10.0
            
      with:
        context: ./Backend
        push: true
        tags: ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mayura/todolist-backend:latest

    - name: Log out from Amazon ECR
      run: docker logout ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com

    
  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push  # This line ensures the deploy job runs only after the build job is successful

    steps:
    - name: Update package list
      run: sudo apt-get update

    - name: Install SSH client
      run: sudo apt-get install -y openssh-client

    - name: Add SSH key
      run: echo "${{ secrets.EC2_KEY }}" > mykey.pem && chmod 600 mykey.pem
    
    - name: SSH into Public EC2 to create SSH tunnel to Private EC2
      run: |
       ssh -v -o StrictHostKeyChecking=no -i mykey.pem -L 2222:${{ secrets.PRIVATE_EC2_HOST }}:22 ${{ secrets.EC2_USER }}@${{ secrets.PUBLIC_EC2_HOST }} -N &
       sleep 5  # Wait for the tunnel to be established



    - name: SSH into Public EC2 to access Private EC2
      run: |
         # Create an SSH tunnel to the private EC2 using the public EC2 as a jump host
         ssh -o StrictHostKeyChecking=no -i mykey.pem -L 2222:${{ secrets.PRIVATE_EC2_HOST }}:22 ${{ secrets.EC2_USER }}@${{ secrets.PUBLIC_EC2_HOST }} -N &
     
         # Give some time for the SSH tunnel to establish
          sleep 5
     
          echo "SSH tunnel established to private EC2 on port 2222!"
     
    - name: Deploy to Private EC2
      run: |
         # SSH into the private EC2 via the tunnel on port 2222
         ssh -o StrictHostKeyChecking=no -p 2222 -i mykey.pem ${{ secrets.EC2_USER }}@localhost << 'EOF'
           # Deployment commands for the private EC2
           echo "Deploying to private EC2!"
           # Add your deployment commands here
          
          sudo apt-get update
          uptime
          sudo -i
          snap install aws-cli --classic
      

          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}
    
          aws ecr get-login-password --region ${{ secrets.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com
    
          docker stop todolist-backend || true 
          docker rm todolist-backend || true

          docker system prune -f

          docker pull ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mayura/todolist-backend:latest
    
          docker run -d --name todolist-backend -p 9090:9090 ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ secrets.AWS_REGION }}.amazonaws.com/mayura/todolist-backend:latest

        EOF